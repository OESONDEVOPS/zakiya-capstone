pipeline {
    agent any
  
    stages {
        stage('Provision Infrastructure') {
            steps {
                dir('infra/terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        
        stage('Configure Hosts with Ansible') {
            steps {
                script {
                    def jenkinsIP = sh(script: 'terraform -chdir=infra/terraform output -raw jenkins_public_ip', returnStdout: true).trim()
                    def k8sNodes = sh(script: 'terraform -chdir=infra/terraform output -json k8s_node_ips | jq -r .[]', returnStdout: true).trim().split('\n')
                    
                    // Create inventory file
                    writeFile file: 'ansible/inventory.ini', text: """
                    [jenkins_host]
                    ${jenkinsIP}
                    
                    [k8s_nodes]
                    ${k8sNodes[0]}
                    ${k8sNodes[1]}
                    """
                    
                    // Run Ansible playbooks
                    dir('ansible/playbooks') {
                        sh 'ansible-playbook -i ../inventory.ini install_jenkins.yml'
                        sh 'ansible-playbook -i ../inventory.ini install_k8s.yml'
                    }
                }
            }
        }
        
        stage('Build and Deploy Application') {
            steps {
                build job: 'microservice-pipeline', wait: false
            }
        }
        
        stage('Setup Monitoring') {
            steps {
                script {
                    // Get kubeconfig from master node
                    def k8sMaster = sh(script: 'terraform -chdir=infra/terraform output -json k8s_node_ips | jq -r .[0]', returnStdout: true).trim()
                    sh "scp -o StrictHostKeyChecking=no ubuntu@${k8sMaster}:~/.kube/config ./kubeconfig"
                    
                    // Install monitoring stack
                    withKubeConfig([credentialsId: 'kubeconfig', serverUrl: '', contextName: '']) {
                        sh 'kubectl create namespace monitoring || true'
                        sh 'helm repo add prometheus-community https://prometheus-community.github.io/helm-charts'
                        sh 'helm repo add grafana https://grafana.github.io/helm-charts'
                        sh 'helm repo update'
                        sh 'helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring'
                        sh 'helm upgrade --install grafana grafana/grafana --namespace monitoring --set adminPassword=admin --set service.type=NodePort --set service.nodePort=30000'
                        sh 'kubectl apply -f monitoring/service-monitor.yaml'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}